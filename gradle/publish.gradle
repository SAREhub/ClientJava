apply plugin: 'maven'
apply plugin: 'signing'

def getTagName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getVersion = { ->
 	def tagName = getTagName();                                 
	if (tagName ==~ /(\d+\.\d+\.\d+)(-SNAPSHOT)*/) {                                                          
    	return tagName;
	}
	
	return false
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

group = "com.sarehub"
archivesBaseName = "client"
version = ""
gradle.taskGraph.whenReady { taskGraph ->
  if(taskGraph.hasTask(':uploadArchives')) {
   version = getVersion()
	if (version == false) {
		throw new RuntimeException("invalid tag name format: " + getTagName())
	}
	
	Console console = System.console()
	console.printf "\n\nWe have to sign some things in this build...\n\n"

	if ( !project.hasProperty('signing.keyId') ) {
		def id = console.readLine("PGP Key Id: ")
		allprojects { ext."signing.keyId" = id }
	}

	if ( !project.hasProperty('signing.secretKeyRingFile') ) {
		def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
		allprojects { ext."signing.secretKeyRingFile" = file }
	}

	if ( !project.hasProperty('signing.password') ) {
		def password = console.readPassword("PGP Private Key Password: ")
		allprojects { ext."signing.password" = password }
	}
	
	if ( !project.hasProperty('nexusUser') ) {
		throw new RuntimeException("nexusUser undefined");
	}
	
	if ( !project.hasProperty('nexusPassword') ) {
		throw new RuntimeException("nexusPassword undefined");
	}	
  }
}



uploadArchives {
  repositories {
    mavenDeployer {
   	 beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: nexusUser, password: nexusPassword)
      }
    
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: nexusUser, password: nexusPassword)
      }

      pom.project {
        name 'SAREhub Client'
        packaging 'jar'
       	description 'Client for SAREhub Event Bus'
        url 'https://sarehub.github.io/PHP_Client/'

        scm {
            url 'https://github.com/SAREhub/PHP_Client'
            developerConnection 'scm:git:ssh://github.com:SAREhub/PHP_Client.git'
            connection 'scm:https://github.com/SAREhub/PHP_Client.git'
         }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
             id 'Mararok'
             name 'Andrzej Wasiak'
             email 'mararok@gmail.com'
          }
        }
      }
    }
  }
}

